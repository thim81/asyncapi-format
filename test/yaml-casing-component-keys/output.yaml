asyncapi: 2.2.0
info:
  title: Streetlights Kafka API
  version: 1.0.0
  description: |
    The Smartylighting Streetlights API allows you to remotely manage the city lights.

    ### Check out its awesome features:

    * Turn a specific streetlight on/off ðŸŒƒ
    * Dim a specific streetlight ðŸ˜Ž
    * Receive real-time information about environmental lighting conditions ðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  production:
    url: test.mosquitto.org:{port}
    protocol: mqtt
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    security:
      - api_key: []
      - supported_oauth_flows:
          - streetlights:on
          - streetlights:off
          - streetlights:dim
      - open_id_connect_well_known: []
defaultContentType: application/json
channels:
  smartylighting.streetlights.1.0.event.{streetlightId}.lighting.measured:
    description: The topic on which measured values may be produced and consumed.
    subscribe:
      operationId: measuredStreetlight
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turn_on_off'
    parameters:
      streetlight-id:
        $ref: '#/components/parameters/streetlight-id'
    publish:
      summary: Inform about environmental lighting conditions of a particular streetlight.
      operationId: receiveLightMeasurement
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/light_measured'
  smartylighting.streetlights.1.0.action.{streetlightId}.turn.on:
    parameters:
      streetlight-id:
        $ref: '#/components/parameters/streetlight-id'
    subscribe:
      operationId: turnOn
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turn_on_off'
  smartylighting.streetlights.1.0.action.{streetlightId}.turn.off:
    parameters:
      streetlight-id:
        $ref: '#/components/parameters/streetlight-id'
    subscribe:
      operationId: turnOff
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turn_on_off'
  smartylighting.streetlights.1.0.action.{streetlightId}.dim:
    parameters:
      streetlight-id:
        description: The ID of the streetlight.
        schema:
          type: string
    subscribe:
      operationId: dimLight
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        title: Dim light
        summary: Command a particular streetlight to dim the lights.
        traits:
          - $ref: '#/components/messageTraits/common-headers'
        payload:
          type: object
          properties:
            percentage:
              type: integer
              description: Percentage to which the light should be dimmed to.
              minimum: 0
              maximum: 100
            sentAt:
              $ref: '#/components/schemas/sent_at'
components:
  messages:
    light_measured:
      name: lightMeasured
      title: Light measured
      summary: Inform about environmental lighting conditions of a particular streetlight.
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/common-headers'
      payload:
        $ref: '#/components/schemas/light_measured_payload'
    turn_on_off:
      name: turnOnOff
      title: Turn on/off
      summary: Command a particular streetlight to turn the lights on or off.
      traits:
        - $ref: '#/components/messageTraits/common-headers'
      payload:
        $ref: '#/components/schemas/turn_on_off_payload'
    dim_light:
      name: dimLight
      title: Dim light
      summary: Command a particular streetlight to dim the lights.
      traits:
        - $ref: '#/components/messageTraits/common-headers'
      payload:
        type: object
        properties:
          percentage:
            type: integer
            description: Percentage to which the light should be dimmed to.
            minimum: 0
            maximum: 100
          sentAt:
            $ref: '#/components/schemas/sent_at'
  schemas:
    light_measured_payload:
      type: object
      properties:
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: '#/components/schemas/sent_at'
    turn_on_off_payload:
      type: object
      properties:
        command:
          type: string
          enum:
            - 'on'
            - 'off'
          description: Whether to turn on or off the light.
        sentAt:
          $ref: '#/components/schemas/sent_at'
    dim_light_payload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be dimmed to.
          minimum: 0
          maximum: 100
        sentAt:
          $ref: '#/components/schemas/sent_at'
    sent_at:
      type: string
      format: date-time
      description: Date and time when the message was sent.
  securitySchemes:
    api_key:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    supported_oauth_flows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        implicit:
          authorizationUrl: https://authserver.example/auth
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        password:
          tokenUrl: https://authserver.example/token
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        clientCredentials:
          tokenUrl: https://authserver.example/token
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
        authorizationCode:
          authorizationUrl: https://authserver.example/auth
          tokenUrl: https://authserver.example/token
          refreshUrl: https://authserver.example/refresh
          scopes:
            streetlights:on: Ability to switch lights on
            streetlights:off: Ability to switch lights off
            streetlights:dim: Ability to dim the lights
    open_id_connect_well_known:
      type: openIdConnect
      openIdConnectUrl: https://authserver.example/.well-known
  parameters:
    streetlight-id:
      description: The ID of the streetlight.
      schema:
        type: string
  messageTraits:
    common-headers:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100
  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId: my-app-id
